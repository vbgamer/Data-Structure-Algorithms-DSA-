{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMQoiy6IUfHEL9s2PWP4/A3",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vbgamer/Data-Structure-Algorithms-DSA-/blob/main/Arrays_in_Python.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**1. Approach 1: Linear Traversal (Iterative Method)**"
      ],
      "metadata": {
        "id": "dsFsPkvr4BOc"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wqiEVHTS3PVZ",
        "outputId": "0c611221-498d-4cfa-c015-36e4d884caee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum = 8, Minimum = -4\n"
          ]
        }
      ],
      "source": [
        "def find_max_min(arr):\n",
        "    if not arr:\n",
        "        return None, None\n",
        "\n",
        "    max_value = arr[0]\n",
        "    min_value = arr[0]\n",
        "\n",
        "    for num in arr[1:]:\n",
        "        if num > max_value:\n",
        "            max_value = num\n",
        "        if num < min_value:\n",
        "            min_value = num\n",
        "\n",
        "    return max_value, min_value\n",
        "\n",
        "arr = [3, 5, 1, 8, -2, 7, -4]\n",
        "max_val, min_val = find_max_min(arr)\n",
        "print(f\"Maximum = {max_val}, Minimum = {min_val}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2. Approach 2: Divide and Conquer**"
      ],
      "metadata": {
        "id": "oOllqy0e3_8L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_max_min_dnc(arr, low, high):\n",
        "\n",
        "    if low == high:\n",
        "        return arr[low], arr[low]\n",
        "\n",
        "    if high == low + 1:\n",
        "        if arr[low] > arr[high]:\n",
        "            return arr[low], arr[high]\n",
        "        else:\n",
        "            return arr[high], arr[low]\n",
        "\n",
        "    mid = (low + high) // 2\n",
        "    max1, min1 = find_max_min_dnc(arr, low, mid)\n",
        "    max2, min2 = find_max_min_dnc(arr, mid + 1, high)\n",
        "\n",
        "    return max(max1, max2), min(min1, min2)\n",
        "\n",
        "arr = [3, 5, 1, 8, -2, 7, -4]\n",
        "max_val, min_val = find_max_min_dnc(arr, 0, len(arr) - 1)\n",
        "print(f\"Maximum = {max_val}, Minimum = {min_val}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nu6awiwW6Ejm",
        "outputId": "c8141d26-2374-4ca2-b042-f3cdb3105fc9"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum = 8, Minimum = -4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3. Approach 3: Using Python's Built-in Functions**"
      ],
      "metadata": {
        "id": "2oHIwIYX9Cyx"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def find_max_min_builtin(arr):\n",
        "    if not arr:\n",
        "        return None, None\n",
        "    return max(arr), min(arr)\n",
        "\n",
        "arr = [3, 5, 1, 8, -2, 7, -4]\n",
        "max_val, min_val = find_max_min_builtin(arr)\n",
        "print(f\"Maximum = {max_val}, Minimum = {min_val}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Isb7YNvT7WeY",
        "outputId": "b784f6ca-94a6-440a-880f-93bb3ea47cb2"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Maximum = 8, Minimum = -4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "jLjnTjc09PZI"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
