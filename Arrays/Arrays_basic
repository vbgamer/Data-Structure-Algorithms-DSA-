{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPiLZ2MVZEZE7lurkFrBuHi",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/vbgamer/Data-Structure-Algorithms-DSA-/blob/vbgamer-patch-2/Arrays_Question_.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1. Find the Maximum Subarray Sum\n",
        "2. Rotate an Array by D Positions\n",
        "3. Merge Two Sorted Arrays\n",
        "4. Move Zeroes to the End\n",
        "5. Find the Majority Element\n",
        "6. Find the Missing Number in an Array\n",
        "7. Trapping Rain Water\n",
        "8. Search Element in Rotated Sorted Array"
      ],
      "metadata": {
        "id": "nK7i56lFwAx7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def maximum_sub_array(arr):\n",
        "    n = arr[0]\n",
        "\n",
        "    for i in range(len(arr)):\n",
        "        currSum = 0\n",
        "        for j in range(i, len(arr)):\n",
        "            currSum = currSum + arr[j]\n",
        "            n = max(n, currSum)\n",
        "    return n\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    arr = list(map(int, input(\" Enter the string\").split(',')))\n",
        "    print(\"The sum is \",maximum_sub_array(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3XNVosIJwUVp",
        "outputId": "3344bbe3-e6f7-4436-a211-082d0a1a5811"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " Enter the string1,-2,5,-9,7,6,3,-4\n",
            "The sum is  16\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def rotate_array(arr, d):\n",
        "    n = len(arr)\n",
        "\n",
        "    for i in range(d):\n",
        "        temp = arr[0]\n",
        "        for j in range(n-1):\n",
        "            arr[j] =arr[j+1]\n",
        "        arr[n-1] = temp\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  arr = list(map(int,input(\"Enter the string\").split(',')))\n",
        "  d = int(input(\"Enter the difference\"))\n",
        "  rotate_array(arr, d)\n",
        "  print(rotate_array(arr, d))\n",
        "\n",
        "  for i in range(len(arr)):\n",
        "        print(arr[i], end=\" \")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QPHllVJjxlH3",
        "outputId": "03b4fe59-a1b3-48f4-8b9b-475a3930fcc2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string1,2,3,4,5,6\n",
            "Enter the difference2\n",
            "None\n",
            "5 6 1 2 3 4 "
          ]
        }
      ]
    },
    {
      "source": [
        "def mere_array(arr1, arr2):\n",
        "  arr3 = arr1 + arr2\n",
        "  arr3.sort()\n",
        "  return arr3\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  arr1 = list(map(int,input().split(',')))\n",
        "  arr2 = list(map(int,input().split(',')))\n",
        "\n",
        "  result = mere_array(arr1, arr2)\n",
        "  print(result)\n",
        "\n",
        "  for value in result:\n",
        "    print(value,end=\" \")"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OMW5S1XN3l-N",
        "outputId": "93b6cfc1-1dfa-40fc-c503-df56fa5fa642"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1,2,3,4,5\n",
            "6,7,8,9\n",
            "[1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
            "1 2 3 4 5 6 7 8 9 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def push_zeros_to_end (arr):\n",
        "  count = 0\n",
        "  for i in range(len(arr)):\n",
        "    if arr[i] != 0 :\n",
        "      arr[i], arr[count] = arr[count], arr[i]\n",
        "      count +=1\n",
        "\n",
        "  return arr\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  arr = list(map(int,input(\"Enter the string \").split(',')))\n",
        "  result = push_zeros_to_end(arr)\n",
        "  print(\" Push zeros to end\",result)\n",
        "  for num in arr:\n",
        "    print(num, end=\" \")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1S-V-jufe83k",
        "outputId": "6d90456f-61d1-4385-d4d0-b15306870068"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string 1,2,0,0,3,4,0,0,5,6,0,9\n",
            " Push zeros to end [1, 2, 3, 4, 5, 6, 9, 0, 0, 0, 0, 0]\n",
            "1 2 3 4 5 6 9 0 0 0 0 0 "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def majorityElement(arr):\n",
        "    n = len(arr)\n",
        "    for i in range(n):\n",
        "        count = 0\n",
        "        for j in range(n):\n",
        "            if arr[i] == arr[j]:\n",
        "                count += 1\n",
        "        if count > n // 2:\n",
        "            return arr[i]\n",
        "    return -1\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    arr = list(map(int,input(\"Enter the string: \").split(',')))\n",
        "\n",
        "    print(majorityElement(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NMTQE-JefoLD",
        "outputId": "5121a70e-d66b-4a4a-e776-4c860d09b7c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string: 1,1,1,1,2,4,3\n",
            "1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def find_missing_number(arr):\n",
        "  n = len(arr)\n",
        "\n",
        "  expected_sum = (n* (n+1)) //2\n",
        "  actual_sum = sum(arr)\n",
        "\n",
        "  find_missing_number = expected_sum - actual_sum\n",
        "  return find_missing_number\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "  arr = list(map(int,input(\"Enter the number of string\").split(',')))\n",
        "  print(find_missing_number(arr))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qk5jDw1-i3u6",
        "outputId": "e841e128-3d38-4ff2-91f7-c761ede7a11a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of string1,2,4,5,6\n",
            "-3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def maxWater(arr):\n",
        "    left = 1\n",
        "    right = len(arr) - 2\n",
        "\n",
        "    lMax = arr[left - 1]\n",
        "    rMax = arr[right + 1]\n",
        "\n",
        "    res = 0\n",
        "    while left <= right:\n",
        "        if rMax <= lMax:\n",
        "            res += max(0, rMax - arr[right])\n",
        "            rMax = max(rMax, arr[right])\n",
        "\n",
        "            right -= 1\n",
        "        else:\n",
        "\n",
        "            res += max(0, lMax - arr[left])\n",
        "            lMax = max(lMax, arr[left])\n",
        "\n",
        "            left += 1\n",
        "    return res\n",
        "if __name__ == \"__main__\":\n",
        "  arr = list(map(int,input(\"Enter the string\").split(',')))\n",
        "  print(maxWater(arr))"
      ],
      "metadata": {
        "id": "BtA7SDyDkqE9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9063643a-a827-4974-fc03-3880d504ee19"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string 2, 1, 5, 3, 1, 0, 4\n",
            "9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def search(arr, key):\n",
        "    lo = 0\n",
        "    hi = len(arr) - 1\n",
        "\n",
        "    while lo <= hi:\n",
        "        mid = lo + (hi - lo) // 2\n",
        "        if arr[mid] == key:\n",
        "            return mid\n",
        "        if arr[mid] >= arr[lo]:\n",
        "            if key >= arr[lo] and key < arr[mid]:\n",
        "                hi = mid - 1\n",
        "            else:\n",
        "                lo = mid + 1\n",
        "        else:\n",
        "            if key > arr[mid] and key <= arr[hi]:\n",
        "                lo = mid + 1\n",
        "            else:\n",
        "                hi = mid - 1\n",
        "    return -1\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    arr1 = list(map(int,input(\"Enter the string\").split(',')))\n",
        "    key1 = int(input(\"Enter the key\"))\n",
        "    print(search(arr1, key1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B2IInsYpmZ2e",
        "outputId": "91a1410d-009b-4783-8bc4-d78e0f3f9abb"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the string5, 6, 7, 8, 9, 10, 1, 2, 3\n",
            "Enter the key3\n",
            "8\n"
          ]
        }
      ]
    }
  ]
}
